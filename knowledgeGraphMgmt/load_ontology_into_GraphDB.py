#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
@author: David Herron
"""

'''
This script is a subset of script load_and_augment_4.py

This script simply loads an ontology into GraphDB

Requirements:
* GraphDB must be running and empty
  - emptying GraphDB, if required, must be done manually via the GraphDB 
    web-console

This script was created to be executed in an IDE, cell by cell.
'''

#%% imports

import vrd_utils15 as vrdu15

import os


#%%

# ip address and port number of GraphDB instance
#graphdb_address_port = 'http://192.168.0.151:7200'
graphdb_address_port = 'http://localhost:7200'

repository_name = 'test'

base_graphdb_url = graphdb_address_port + '/repositories/' + repository_name

print()
print('GraphDB base url:')
print(base_graphdb_url)


#%% specify directory for storing curl tool output files

# output directory for files generated by the 'curl' tool
curl_dir = os.path.join('~', 'research', 'curl')
curl_dir = os.path.expanduser(curl_dir)


#%% verify connectivity and check that the default graph is empty

graph_name = 'default'

print()
print('Checking size of GraphDB default graph ...')

outcome, n_triples = vrdu15.get_graph_size(base_graphdb_url, graph_name)

print(f'GraphDB interaction outcome: {outcome}')
print(f"Number of triples in graph '{graph_name}': {n_triples}")

# OWL2-RL ruleset has 1020 triples
# OWL2-RL (Optimized) ruleset has 786 triples
if n_triples != 1020 and n_triples != 786:
    print()
    print('STOPPING: GraphDB default graph is not empty')
    raise ValueError('GraphDB default graph is not empty')

## NOTE:
## 1) the ruleset configured for a GraphDB repository has some number of
##    RDF/RDFS/OWL axioms and statements associated with it; these are
##    stored away invisibly, but they contribute to the count of 'inferred'
##    statements in the repository; for the OWL2-RL ruleset there are 1020
##    associated inferred statements; so a GraphDB repository configured
##    to use the OWL2-RL ruleset is empty when it contains 0 explicit triples
##    and 1020 inferred triples;


#%% specify a VRD-World OWL ontology with which to work

# set the name the VRD-World OWL ontology file to work with
target_ontology = 'vrd_world_v1_2_disjoint.owl'

#ontology_dir = os.path.join('~', 'Downloads')
ontology_dir = os.path.join('..', 'ontology')
ontology_dir = os.path.expanduser(ontology_dir)
ontology_path = os.path.join(ontology_dir, target_ontology)

print()
print(f"Ontology '{target_ontology}' is to be loaded into the KG")


#%% load the ontology into the default graph of the GraphDB repository

print()
print('-------------------------------------------------------')
print() 
print('Loading ontology into GraphDB default graph ...')
print() 

vrdu15.post_rdf_file_to_default_graph_via_http(base_graphdb_url, 
                                               ontology_path,
                                               curl_dir,
                                               verbose=False)

outcome, resp_code, msg, msg_info = vrdu15.get_http_interaction_outcome(curl_dir, 
                                                                        verbose=False)

show_details = False
if show_details:
    print()
    print(f'interaction outcome: {outcome}')
    print(f'http_response code: {resp_code}')
    print(f'error msg: {msg}')
    print('error info:')
    print(msg_info)

if outcome == 'success':
    print('ontology loaded successfully')
else:
    print('ERROR: problem loading ontology **')


#%% check the KG size after loading the ontology

graph_name = 'default'

print()
print('Checking size of GraphDB default graph ...')

outcome, n_triples = vrdu15.get_graph_size(base_graphdb_url, graph_name)

print(f'GraphDB interaction outcome: {outcome}')

print(f"Number of triples in graph '{graph_name}': {n_triples}")


#%%

print()
print('Processing complete!')




